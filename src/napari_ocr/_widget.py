"""
This module contains four napari widgets declared in
different ways:

- a pure Python function flagged with `autogenerate: true`
    in the plugin manifest. Type annotations are used by
    magicgui to generate widgets for each parameter. Best
    suited for simple processing tasks - usually taking
    in and/or returning a layer.
- a `magic_factory` decorated function. The `magic_factory`
    decorator allows us to customize aspects of the resulting
    GUI, including the widgets associated with each parameter.
    Best used when you have a very simple processing task,
    but want some control over the autogenerated widgets. If you
    find yourself needing to define lots of nested functions to achieve
    your functionality, maybe look at the `Container` widget!
- a `magicgui.widgets.Container` subclass. This provides lots
    of flexibility and customization options while still supporting
    `magicgui` widgets and convenience methods for creating widgets
    from type annotations. If you want to customize your widgets and
    connect callbacks, this is the best widget option for you.
- a `QWidget` subclass. This provides maximal flexibility but requires
    full specification of widget layouts, callbacks, events, etc.

References:
- Widget specification: https://napari.org/stable/plugins/guides.html?#widgets
- magicgui docs: https://pyapp-kit.github.io/magicgui/

Replace code below according to your needs.
"""

# import napari_guitils
# from napari_guitils.gui_structures import VHGroup, TabSet

from qtpy.QtWidgets import QPushButton, QVBoxLayout, QWidget


class NapariOCRWidget(QWidget):
    # your QWidget.__init__ can optionally request the napari viewer instance
    # use a type annotation of 'napari.viewer.Viewer' for any parameter
    def __init__(self, napari_viewer):
        super().__init__()
        self.viewer = napari_viewer

        self.widget_layout = QVBoxLayout()
        self.setLayout(self.widget_layout)

        self.create_tab()
        self.add_connections()

    def create_tab(self):
        """Generates the elements of the tab"""
        # self.files_group = VHGroup("Actions", orientation='G')
        self.btn_import_image = QPushButton("Import Image")
        # self.files_group.glayout.addWidget(self.btn_import, 2, 0, 1, 1)
        self.layout().addWidget(self.btn_import_image)

    def add_connections(self):
        """
        Connects GUI elements to functions to be executed when GUI elements are activated
        """
        self.btn_import_image.clicked.connect(self.on_click_print_something)

    def on_click_print_something(self):
        print("napari has", len(self.viewer.layers), "layers")
